import glob
import pickle
import numpy as np
from keras.utils import np_utils
from helper import constant
from music21 import converter, instrument, note, chord, midi, stream


class DataHandler:
    def load_dataset(self, args):
        print("[INFO] loading MIDI files...")

        notes, offsets = self.load_partition(args["instrument"])
        vocab_length = len(set(notes))
        network_input, network_output = self.prepare_sequences(notes, vocab_length)

        return network_input, network_output, vocab_length

    def prepare_sequences(self, notes, vocab_length):
        sequence_length = constant.SEQUENCE_LENGTH
        pitches = sorted(set(item for item in notes))
        note_to_int = dict((current_note, number) for number, current_note in enumerate(pitches))

        network_input = []
        network_output = []

        for i in range(0, len(notes) - sequence_length, 1):
            sequence_in = notes[i:i + sequence_length]
            sequence_out = notes[i + sequence_length]
            network_input.append([note_to_int[char] for char in sequence_in])
            network_output.append(note_to_int[sequence_out])

        n_patterns = len(network_input)

        network_input = np.reshape(network_input, (n_patterns, sequence_length, 1))
        network_input = network_input / float(vocab_length)
        network_output = np_utils.to_categorical(network_output)

        return network_input, network_output

    def load_partition(self, desired_instrument):
        notes = []
        offsets = []
        print("[INFO] If a file does not contain one of the required instruments, it will be skipped.")

        for i, file in enumerate(glob.glob(constant.DATASET_PATH + '/' + constant.DATASET_FORMAT)):
            try:
                midi_song = converter.parse(file)
                partitions = instrument.partitionByInstrument(midi_song)

                if partitions:
                    for partition in partitions:
                        if partition.id == desired_instrument:
                            selected_partition = partition

                            for element in selected_partition.flat.notes:
                                offsets.append(element.offset)
                                if isinstance(element, note.Note):
                                    notes.append(str(element.pitch))
                                elif isinstance(element, chord.Chord):
                                    notes.append('.'.join(str(n) for n in element.normalOrder))
                            print("[INFO] song {} partition loaded".format(file))
                            break
            except (IndexError, midi.MidiException) as e:
                print('[INFO] An error happened during song loading: {}. Skipping...'.format(file))
                print(e)
                continue

            if len(notes) >= 300:
                break

        with open(constant.NOTE_PATH, 'wb') as filepath:
            pickle.dump(notes, filepath)

        print("[INFO] Done loading MIDI files...")

        return notes, offsets

    def save_midi(self, args, prediction_output):
        offset = 0
        output_notes = []

        # create note and chord objects based on the values generated by the model
        for pattern in prediction_output:
            # pattern is a chord
            if ('.' in pattern) or pattern.isdigit():
                notes_in_chord = pattern.split('.')
                notes = []
                for current_note in notes_in_chord:
                    new_note = note.Note(int(current_note))
                    new_note.storedInstrument = instrument.Piano()
                    notes.append(new_note)
                new_chord = chord.Chord(notes)
                new_chord.offset = offset
                output_notes.append(new_chord)
            # pattern is a note
            else:
                new_note = note.Note(pattern)
                new_note.offset = offset
                new_note.storedInstrument = instrument.Piano()
                output_notes.append(new_note)

            # increase offset each iteration so that notes do not stack
            offset += 0.5

        midi_stream = stream.Stream(output_notes)
        midi_stream.write('midi', fp=constant.NEW_MUSIC)
